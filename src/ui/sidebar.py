"""
Sidebar component for displaying gait analysis metrics
"""

from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QFrame, QPushButton, QScrollArea, QGroupBox)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QPalette


class MetricCard(QFrame):
    """Individual metric display card"""
    
    def __init__(self, title: str, value: str = "0", unit: str = ""):
        super().__init__()
        self.setFrameStyle(QFrame.Shape.Box)
        self.setStyleSheet("""
            QFrame {
                background-color: #2b2b2b;
                border: 1px solid #404040;
                border-radius: 8px;
                padding: 8px;
                margin: 4px;
            }
        """)
        
        layout = QVBoxLayout()
        layout.setSpacing(4)
        
        # Title
        self.title_label = QLabel(title)
        self.title_label.setFont(QFont("Arial", 12))
        self.title_label.setStyleSheet("color: #cccccc; font-weight: bold;")
        
        # Value
        self.value_label = QLabel(f"{value} {unit}")
        self.value_label.setFont(QFont("Arial", 18, QFont.Weight.Bold))
        self.value_label.setStyleSheet("color: #00ff88;")
        self.value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        layout.addWidget(self.title_label)
        layout.addWidget(self.value_label)
        self.setLayout(layout)
        
    def update_value(self, value: str, unit: str = ""):
        """Update the metric value"""
        self.value_label.setText(f"{value} {unit}")


class GaitMetricsPanel(QGroupBox):
    """Panel containing all gait metrics"""
    
    def __init__(self):
        super().__init__("Th√¥ng s·ªë d√°ng ƒëi")
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #404040;
                border-radius: 8px;
                margin-top: 1ex;
                color: #ffffff;
                background-color: #1e1e1e;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        
        self.setup_ui()
        
    def setup_ui(self):
        """Setup the UI layout"""
        layout = QVBoxLayout()
        layout.setSpacing(8)
        
        # Create metric cards
        self.metrics = {
            "step_count": MetricCard("S·ªë b∆∞·ªõc", "0", "b∆∞·ªõc"),
            "cadence": MetricCard("T·∫ßn s·ªë b∆∞·ªõc", "0.0", "b∆∞·ªõc/ph√∫t"),
            "stride_length": MetricCard("ƒê·ªô d√†i b∆∞·ªõc", "0.0", "px"),
            "step_time": MetricCard("Th·ªùi gian b∆∞·ªõc", "0.00", "gi√¢y"),
            "walking_speed": MetricCard("T·ªëc ƒë·ªô ƒëi", "0.0", "px/s"),
            "foot_angle_left": MetricCard("G√≥c ch√¢n tr√°i", "0.0", "¬∞"),
            "foot_angle_right": MetricCard("G√≥c ch√¢n ph·∫£i", "0.0", "¬∞"),
        }
        
        # Add all metric cards to layout
        for metric_card in self.metrics.values():
            layout.addWidget(metric_card)
        
        # Add stretch to push everything to top
        layout.addStretch()
        
        self.setLayout(layout)
    
    def update_metrics(self, metrics_dict):
        """Update all metrics with new values"""
        metric_mapping = {
            "S·ªë b∆∞·ªõc": ("step_count", "b∆∞·ªõc"),
            "T·∫ßn s·ªë b∆∞·ªõc (b∆∞·ªõc/ph√∫t)": ("cadence", "b∆∞·ªõc/ph√∫t"),
            "ƒê·ªô d√†i b∆∞·ªõc (px)": ("stride_length", "px"),
            "Th·ªùi gian b∆∞·ªõc (s)": ("step_time", "gi√¢y"),
            "T·ªëc ƒë·ªô ƒëi (px/s)": ("walking_speed", "px/s"),
            "G√≥c ch√¢n tr√°i (¬∞)": ("foot_angle_left", "¬∞"),
            "G√≥c ch√¢n ph·∫£i (¬∞)": ("foot_angle_right", "¬∞"),
        }
        
        for display_name, value in metrics_dict.items():
            if display_name in metric_mapping:
                metric_key, unit = metric_mapping[display_name]
                if metric_key in self.metrics:
                    self.metrics[metric_key].update_value(str(value), unit)


class ControlPanel(QGroupBox):
    """Control panel for camera and analysis controls"""
    
    connect_camera = pyqtSignal()
    disconnect_camera = pyqtSignal()
    start_analysis = pyqtSignal()
    stop_analysis = pyqtSignal()
    reset_analysis = pyqtSignal()
    
    def __init__(self):
        super().__init__("ƒêi·ªÅu khi·ªÉn")
        self.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #404040;
                border-radius: 8px;
                margin-top: 1ex;
                color: #ffffff;
                background-color: #1e1e1e;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
            }
        """)
        
        self.is_camera_connected = False
        self.is_analysis_running = False
        self.setup_ui()
        
    def setup_ui(self):
        """Setup control buttons"""
        layout = QVBoxLayout()
        layout.setSpacing(8)
        
        # Camera control buttons
        camera_group = QLabel("üìπ Camera")
        camera_group.setStyleSheet("color: #00ff88; font-weight: bold; margin-bottom: 5px;")
        
        # Connect/Disconnect camera button
        self.camera_btn = QPushButton("K·∫øt n·ªëi Camera")
        self.camera_btn.setStyleSheet("""
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QPushButton:pressed {
                background-color: #1565C0;
            }
        """)
        self.camera_btn.clicked.connect(self.toggle_camera)
        
        # Analysis control buttons
        analysis_group = QLabel("üî¨ Ph√¢n t√≠ch")
        analysis_group.setStyleSheet("color: #00ff88; font-weight: bold; margin-top: 10px; margin-bottom: 5px;")
        
        # Start/Stop analysis button
        self.analysis_btn = QPushButton("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
        self.analysis_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QPushButton:pressed {
                background-color: #3d8b40;
            }
        """)
        self.analysis_btn.clicked.connect(self.toggle_analysis)
        self.analysis_btn.setEnabled(False)  # Disabled until camera connected
        
        # Reset button
        self.reset_btn = QPushButton("ƒê·∫∑t l·∫°i")
        self.reset_btn.setStyleSheet("""
            QPushButton {
                background-color: #f44336;
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #da190b;
            }
            QPushButton:pressed {
                background-color: #b71c1c;
            }
        """)
        self.reset_btn.clicked.connect(self.reset_analysis_clicked)
        
        layout.addWidget(camera_group)
        layout.addWidget(self.camera_btn)
        layout.addWidget(analysis_group)
        layout.addWidget(self.analysis_btn)
        layout.addWidget(self.reset_btn)
        layout.addStretch()
        
        self.setLayout(layout)
    
    def toggle_camera(self):
        """Toggle camera connection"""
        if self.is_camera_connected:
            self.disconnect_camera.emit()
        else:
            self.connect_camera.emit()
    
    def toggle_analysis(self):
        """Toggle between start and stop analysis"""
        if self.is_analysis_running:
            self.stop_analysis.emit()
        else:
            self.start_analysis.emit()
    
    def set_camera_connected(self, connected: bool):
        """Update camera connection state"""
        self.is_camera_connected = connected
        if connected:
            self.camera_btn.setText("Ng·∫Øt k·∫øt n·ªëi Camera")
            self.camera_btn.setStyleSheet("""
                QPushButton {
                    background-color: #ff9800;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #e68900;
                }
                QPushButton:pressed {
                    background-color: #cc7700;
                }
            """)
            self.analysis_btn.setEnabled(True)
        else:
            self.camera_btn.setText("K·∫øt n·ªëi Camera")
            self.camera_btn.setStyleSheet("""
                QPushButton {
                    background-color: #2196F3;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #1976D2;
                }
                QPushButton:pressed {
                    background-color: #1565C0;
                }
            """)
            self.analysis_btn.setEnabled(False)
            # Also stop analysis if camera disconnected
            if self.is_analysis_running:
                self.set_analysis_running(False)
    
    def set_analysis_running(self, running: bool):
        """Update analysis running state"""
        self.is_analysis_running = running
        if running:
            self.analysis_btn.setText("D·ª´ng ph√¢n t√≠ch")
            self.analysis_btn.setStyleSheet("""
                QPushButton {
                    background-color: #ff9800;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #e68900;
                }
                QPushButton:pressed {
                    background-color: #cc7700;
                }
            """)
        else:
            self.analysis_btn.setText("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch")
            self.analysis_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    padding: 10px;
                    border-radius: 6px;
                    font-size: 12px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QPushButton:pressed {
                    background-color: #3d8b40;
                }
            """)
    
    def reset_analysis_clicked(self):
        """Handle reset button click"""
        self.reset_analysis.emit()


class Sidebar(QWidget):
    """Main sidebar widget containing all panels"""
    
    connect_camera = pyqtSignal()
    disconnect_camera = pyqtSignal()
    start_analysis = pyqtSignal()
    stop_analysis = pyqtSignal()
    reset_analysis = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        self.setFixedWidth(350)
        self.setStyleSheet("""
            QWidget {
                background-color: #1a1a1a;
                color: #ffffff;
            }
        """)
        
        self.setup_ui()
        
    def setup_ui(self):
        """Setup sidebar layout"""
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # Title
        title = QLabel("GaitSenseAI")
        title.setFont(QFont("Arial", 22, QFont.Weight.Bold))
        title.setStyleSheet("color: #00ff88; margin-bottom: 10px;")
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        
        # Control panel
        self.control_panel = ControlPanel()
        self.control_panel.connect_camera.connect(self.connect_camera)
        self.control_panel.disconnect_camera.connect(self.disconnect_camera)
        self.control_panel.start_analysis.connect(self.start_analysis)
        self.control_panel.stop_analysis.connect(self.stop_analysis)
        self.control_panel.reset_analysis.connect(self.reset_analysis)
        
        # Metrics panel
        self.metrics_panel = GaitMetricsPanel()
        
        # Create scroll area for metrics
        scroll = QScrollArea()
        scroll.setWidget(self.metrics_panel)
        scroll.setWidgetResizable(True)
        scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #1a1a1a;
            }
        """)
        
        layout.addWidget(title)
        layout.addWidget(self.control_panel)
        layout.addWidget(scroll, 1)  # Give scroll area most of the space
        
        self.setLayout(layout)
    
    def update_metrics(self, metrics_dict):
        """Update metrics display"""
        self.metrics_panel.update_metrics(metrics_dict)
    
    def set_camera_connected(self, connected: bool):
        """Update camera connection state in control panel"""
        self.control_panel.set_camera_connected(connected)
    
    def set_analysis_running(self, running: bool):
        """Update analysis running state in control panel"""
        self.control_panel.set_analysis_running(running)

